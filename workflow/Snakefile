import os
import glob

configfile: "config/config.yml"

# Main working directory
workspace = config["workspace"]

# Define GROUP, STRAIN and REF wildcards
GROUP, STRAIN = glob_wildcards(workspace + "assembly/{group}_{strain}/genome")
REF, = glob_wildcards(workspace + "assembly/ref/genome/{ref}.fasta")

# Rule all
rule all:
    input:
        ### Polypolish I/O files
        # Long-read draft assembly
        expand(
            workspace + "assembly/{group}_{strain}/genome/{group}_{strain}.fasta",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        # Illumina paired-end short reads
        expand(
            workspace + "assembly/{group}_{strain}/reads/{group}_{strain}_1.fastq.gz",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "assembly/{group}_{strain}/reads/{group}_{strain}_2.fastq.gz",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        # Raw alignments
        expand(
            workspace
            + "assembly/{group}_{strain}/genome/{group}_{strain}_aligned_1.sam",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "assembly/{group}_{strain}/genome/{group}_{strain}_aligned_2.sam",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        # Filtered alignments
        expand(
            workspace
            + "assembly/{group}_{strain}/genome/{group}_{strain}_filtered_1.sam",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "assembly/{group}_{strain}/genome/{group}_{strain}_filtered_2.sam",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        # Polished assembly
        expand(
            workspace
            + "assembly/{group}_{strain}/genome/{group}_{strain}_polished.fasta",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),

        # Added assembly
        # expand(workspace + "added_assembly/{group}_{strain}/genome/{group}_{strain}.fasta", zip, group=ADDGROUP, strain=ADDSTRAIN),
        
        ### Busco directory
        expand(
            workspace + "busco/{group}_{strain}_busco/",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),

        ### Quast directory
        expand(
            workspace + "quast/{group}_{strain}_quast/",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),

        ### Prokka I/O files
        # Reference genome & genbank
        expand(workspace + "assembly/ref/genome/{ref}.fasta", ref=REF),
        # Prokka outputs - REFERENCE 
        expand(workspace + "annotation/ref/{ref}/{ref}.err", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.ffn", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.fsa", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.gff", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.sqn", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.tsv", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.faa", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.fna", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.gbk", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.log", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.tbl", ref=REF),
        expand(workspace + "annotation/ref/{ref}/{ref}.txt", ref=REF),

        # Prokka outputs - STRAINS 
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.err",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.ffn",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.fsa",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.gff",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.sqn",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.tsv",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.faa",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.fna",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.gbk",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.log",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.tbl",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.txt",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),

        ### Roary I/O files
        # Roary outputs - STRAIN-to-REF pairwise
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/accessory.header.embl",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "pangenome/{group}_{strain}_ref_pairwise/accessory.tab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/accessory_binary_genes.fa",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "pangenome/{group}_{strain}_ref_pairwise/accessory_graph.dot",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/blast_identity_frequency.Rtab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "pangenome/{group}_{strain}_ref_pairwise/clustered_proteins",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/core_accessory.header.embl",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace + "pangenome/{group}_{strain}_ref_pairwise/core_accessory.tab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/core_accessory_graph.dot",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/core_alignment_header.embl",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/core_gene_alignment.aln",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/gene_presence_absence.Rtab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/gene_presence_absence.csv",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/number_of_conserved_genes.Rtab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/number_of_genes_in_pan_genome.Rtab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/number_of_new_genes.Rtab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/number_of_unique_genes.Rtab",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/pan_genome_reference.fa",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        expand(
            workspace
            + "pangenome/{group}_{strain}_ref_pairwise/summary_statistics.txt",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
        # Roary output - Within-Group
        expand(workspace + "pangenome2/{group}", group=GROUP),

        # Roary directory - Roary tmp for holding strain GFFs
        expand(workspace + "roary_tmp/{group}/", group=GROUP),

        ### All Group directory
        expand(workspace + "all_groups/{group}/gene_lists/", group=GROUP),
        expand(workspace + "all_groups/{group}/faas/", group=GROUP),
        expand(workspace + "all_groups/{group}/FASTA/", group=GROUP),

        # Roary plots directory
        expand(workspace + "all_groups/{group}/roary_plots/", group=GROUP),

        ### EggNog-Mapper COG analysis output
        expand(workspace + "all_groups/{group}/emapper-core/", group=GROUP),
        expand(workspace + "all_groups/{group}/emapper-shells/", group=GROUP),
        expand(workspace + "all_groups/{group}/cog_plots/", group=GROUP),

        ### VF screening output
        expand(workspace + "vf/{group}/", group=GROUP),


# Rule to run Polypolish for polishing long-read assemblies with Illumina paired-end short reads
rule polypolish:
    input:
        genome_fasta=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}.fasta",
        reads1=workspace + "assembly/{group}_{strain}/reads/{group}_{strain}_1.fastq.gz",
        reads2=workspace + "assembly/{group}_{strain}/reads/{group}_{strain}_2.fastq.gz",
    output:
        aligned1=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_aligned_1.sam",
        aligned2=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_aligned_2.sam",
        filtered1=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_filtered_1.sam",
        filtered2=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_filtered_2.sam",
        polished_fasta=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_polished.fasta",
    params:
        threads=config["polypolish_threads"],  # Number of threads to use for multi-threaded processes
        path=workspace + "assembly/{group}_{strain}/genome/",
    conda:
        "env_polypolish"
    shell:
        """
        bwa index {input.genome_fasta}
        bwa mem -t {params.threads} -a {input.genome_fasta} {input.reads1} > {output.aligned1}
        bwa mem -t {params.threads} -a {input.genome_fasta} {input.reads2} > {output.aligned2}
        polypolish_insert_filter.py --in1 {output.aligned1} --in2 {output.aligned2} \
        --out1 {output.filtered1} --out2 {output.filtered2}
        polypolish {input.genome_fasta} {output.filtered1} {output.filtered2} > {output.polished_fasta}
        """


# Rule to run Busco assessments for polished assemblies and plot assessment plots
rule busco:
    input:
        # Input FASTAs are polished FASTAs from Polypolish
        strain_fasta=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_polished.fasta",
    output:
        out_dir=directory(workspace + "busco/{group}_{strain}_busco/"),
    params:
        lineage_path=workspace + "busco_downloads/lineages/" + config["busco_lineage"],
        output="{group}_{strain}_busco",
        out_path=workspace + "busco/",
        sum_dir=workspace + "busco/summaries/",
    conda:
        "env_busco"
    shell:
        """
        busco -m genome -i {input.strain_fasta} -o {params.output} --out_path {params.out_path} \
         -l {params.lineage_path}

        mkdir -p {params.sum_dir}
        cd {output.out_dir}
        cp *.txt {params.sum_dir}
        
        generate_plot.py -wd {params.sum_dir}
        """


# Rule to run Quast assessments for polished assemblies and plot assessment plots
rule quast:
    input:
        # Input FASTAs are polished FASTAs from Polypolish
        strain_fasta=workspace
        + "assembly/{group}_{strain}/genome/{group}_{strain}_polished.fasta",
    output:
        out_dir=directory(workspace + "quast/{group}_{strain}_quast/"),
    params:
        threads=config["quast_threads"],
    conda:
        "env_quast"
    shell:
        """
        quast -o {output.out_dir} --threads {params.threads} {input.strain_fasta}
        """


# Rule to run Prokka for annotating REFERENCE FASTAs
rule prokka_ref:
    input:
        ref_fasta=workspace + "assembly/ref/genome/{ref}.fasta",
        ref_genbank=workspace + "assembly/ref/{ref}.gb",
    output:
        ref_err=workspace + "annotation/ref/{ref}/{ref}.err",
        ref_ffn=workspace + "annotation/ref/{ref}/{ref}.ffn",
        ref_fsa=workspace + "annotation/ref/{ref}/{ref}.fsa",
        ref_gff=workspace + "annotation/ref/{ref}/{ref}.gff",
        ref_sqn=workspace + "annotation/ref/{ref}/{ref}.sqn",
        ref_tsv=workspace + "annotation/ref/{ref}/{ref}.tsv",
        ref_faa=workspace + "annotation/ref/{ref}/{ref}.faa",
        ref_fna=workspace + "annotation/ref/{ref}/{ref}.fna",
        ref_gbk=workspace + "annotation/ref/{ref}/{ref}.gbk",
        ref_log=workspace + "annotation/ref/{ref}/{ref}.log",
        ref_tbl=workspace + "annotation/ref/{ref}/{ref}.tbl",
        ref_txt=workspace + "annotation/ref/{ref}/{ref}.txt",
    params:
        threads=config["prokka_ref_threads"],
        out_dir=workspace + "annotation/ref/{ref}",
        prefix="{ref}",
        locustag="{ref}",
        kingdom=config["prokka_ref_kingdom"],
    conda:
        "env_prokka"
    shell:
        """
        prokka --outdir {params.out_dir} --prefix {params.prefix} --locustag {params.locustag} \
        --cpus {params.threads} --kingdom {params.kingdom} --addgenes --force \
        --proteins {input.ref_genbank} {input.ref_fasta}
        """


# Rule to run Prokka for annotating polished STRAIN FASTAs
rule prokka_strain:
    input:
        # Input FASTAs are polished FASTAs from Polypolish
        strain_fasta=workspace + "assembly/{group}_{strain}/genome/{group}_{strain}_polished.fasta",
        strain_ref_genbank=expand(workspace + "assembly/ref/{ref}.gb", ref=REF),
    output:
        strain_err=workspace + "annotation/{group}_{strain}/{group}_{strain}.err",
        strain_ffn=workspace + "annotation/{group}_{strain}/{group}_{strain}.ffn",
        strain_fsa=workspace + "annotation/{group}_{strain}/{group}_{strain}.fsa",
        strain_gff=workspace + "annotation/{group}_{strain}/{group}_{strain}.gff",
        strain_sqn=workspace + "annotation/{group}_{strain}/{group}_{strain}.sqn",
        strain_tsv=workspace + "annotation/{group}_{strain}/{group}_{strain}.tsv",
        strain_faa=workspace + "annotation/{group}_{strain}/{group}_{strain}.faa",
        strain_fna=workspace + "annotation/{group}_{strain}/{group}_{strain}.fna",
        strain_gbk=workspace + "annotation/{group}_{strain}/{group}_{strain}.gbk",
        strain_log=workspace + "annotation/{group}_{strain}/{group}_{strain}.log",
        strain_tbl=workspace + "annotation/{group}_{strain}/{group}_{strain}.tbl",
        strain_txt=workspace + "annotation/{group}_{strain}/{group}_{strain}.txt",
    params:
        threads=config["prokka_strain_threads"],
        out_dir=workspace + "annotation/{group}_{strain}/",
        prefix="{group}_{strain}",
        locustag="{group}_{strain}",
        kingdom=config["prokka_strain_kingdom"],
    conda:
        "env_prokka"
    shell:
        """
        prokka --outdir {params.out_dir} --prefix {params.prefix} --locustag {params.locustag} \
        --cpus {params.threads} --kingdom {params.kingdom} --addgenes --force \
        --proteins {input.strain_ref_genbank} {input.strain_fasta}
        """


# Rule to run Roary for STRAIN-to-REF 1:1 pairwise Pangenome analysis
rule roary_strain_ref_pairwise:
    input:
        # Input GFFs are annotated GFFs from Prokka
        ref_gff=expand(workspace + "annotation/ref/{ref}/{ref}.gff", ref=REF),
        strain_gff=workspace + "annotation/{group}_{strain}/{group}_{strain}.gff",
    output:
        accessory_header=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/accessory.header.embl",
        accessory_tab=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/accessory.tab",
        accessory_binary_genes=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/accessory_binary_genes.fa",
        accessory_graph=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/accessory_graph.dot",
        blast_identity_frequency=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/blast_identity_frequency.Rtab",
        clustered_proteins=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/clustered_proteins",
        core_accessory_header=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/core_accessory.header.embl",
        core_accessory=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/core_accessory.tab",
        core_accessory_graph=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/core_accessory_graph.dot",
        core_alignment_header=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/core_alignment_header.embl",
        core_gene_alignment=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/core_gene_alignment.aln",
        gene_presence_absence_rtab=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/gene_presence_absence.Rtab",
        gene_presence_absence_csv=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/gene_presence_absence.csv",
        number_of_conserved_genes=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/number_of_conserved_genes.Rtab",
        number_of_genes_in_pan_genome=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/number_of_genes_in_pan_genome.Rtab",
        number_of_new_genes=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/number_of_new_genes.Rtab",
        number_of_unique_genes=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/number_of_unique_genes.Rtab",
        pan_genome_reference=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/pan_genome_reference.fa",
        summary_statistics=workspace
        + "pangenome/{group}_{strain}_ref_pairwise/summary_statistics.txt",
    params:
        threads=config["roary_pairwise_threads"],
        out_dir=workspace + "pangenome/{group}_{strain}_ref_pairwise/",
        pident=config["roary_pairwise_pident"],
    conda:
        "env_roary"
    shell:
        """
        cd {params.out_dir}
        roary -e -p {params.threads} -i {params.pident} -v {input.ref_gff} {input.strain_gff}
        """


# Rule to make roary_tmp group folder
rule move_gff_files:
    input:
        strain_gff=expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.gff",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
    output:
        tmp_dir=directory(workspace + "roary_tmp/{group}/"),
    params:
        workspace=config["workspace"],
        script=config["move_gff_script"],
        group_info=config["group_info"],
        tmp_dir=directory(workspace + "roary_tmp/"),
    conda:
        "env_roary"
    shell:
        """
        python workflow/scripts/shellmake.py --group_yml config/{params.group_info} --save_path {params.tmp_dir} \
        --script workflow/scripts/{params.script} --workspace {params.workspace}

        bash workflow/scripts/{params.script}
        """


# Rule to run Roary for STRAINS within GROUPS
rule roary_within_group:
    input:
        tmp_dir=workspace + "roary_tmp/{group}/",
    output:
        out_dir=directory(workspace + "pangenome2/{group}/"),
    params:
        threads=config["roary_within_group_threads"],
        pident=config["roary_within_group_pident"],
    conda:
        "env_roary"
    shell:
        """
        mkdir {output.out_dir}
        cd {input.tmp_dir}
        roary -e -p {params.threads} -i {params.pident} -v *.gff
        mv *.gff {output.out_dir}
        """


#############################################################################################################################
# Rule to make six gene lists from Roary gene_presence_absence.csv
# core_all, core_hypo, core_nonhypo, shells_all, shells_hypo, shells_nonhypo
rule gene_list_maker:
    input:
        dummy=rules.roary_within_group.output.out_dir,
    output:
        out_dir=directory(workspace + "all_groups/{group}/gene_lists/"),
    params:
        tmp_dir=directory(workspace + "roary_tmp/{group}/"),
    conda:
        "env_emapper"
    shell:
        """
        mkdir -p {output.out_dir}
        python workflow/scripts/gene_list_maker.py --csv {params.tmp_dir}/gene_presence_absence.csv \
        --save_path {output.out_dir}/
        """


# Rule to copy faa files from Prokka output to GROUP directory
rule move_faa_files:
    input:
        strain_faa=expand(
            workspace + "annotation/{group}_{strain}/{group}_{strain}.faa",
            zip,
            group=GROUP,
            strain=STRAIN,
        ),
    output:
        faa_dir=directory(workspace + "all_groups/{group}/faas/"),
    params:
        workspace=config["workspace"],
        script=config["move_faa_script"],
        group_info=config["group_info"],
        group_dir=workspace + "all_groups/",
    conda:
        "env_emapper"
    shell:
        """
        python workflow/scripts/shellmake2.py --group_yml config/{params.group_info} --save_path {params.group_dir} \
        --script workflow/scripts/{params.script} --workspace {params.workspace}

        bash workflow/scripts/{params.script}
        """


# Rule to curate six FASTA files based gene lists created
rule fasta_curation:
    input:
        faa_dir=rules.move_faa_files.output.faa_dir,
        text_path=rules.gene_list_maker.output.out_dir,
    output:
        fasta_dir=directory(workspace + "all_groups/{group}/FASTA/"),
    params:
        tmp_dir=directory(workspace + "roary_tmp/{group}/"),
        statistics=directory(workspace + "all_groups/{group}/statistics.txt"),
    conda:
        "env_emapper"
    shell:
        """
        mkdir {output.fasta_dir}
        python workflow/scripts/core_shell_statistics.py --text_path {input.text_path}/ --save_path {output.fasta_dir}/ \
         --faa_path {input.faa_dir}/ --gpa {params.tmp_dir}/gene_presence_absence.csv \
         --summary {params.tmp_dir}/summary_statistics.txt > {params.statistics}
        """


# Rule to conduct COG analysis by running Egg-NOG-mapper for each group's core nonhypo FASTAs
rule cog_analysis_core:
    input:
        # Inputs are curated FASTAs from rule fasta_curation
        fasta_dir=rules.fasta_curation.output.fasta_dir,
    output:
        emapper_dir=directory(workspace + "all_groups/{group}/emapper-core/"),
    params:
        # Parameters for Egg-NOG-mapper
        pident=config["emapper_core_pident"],
        evalue=config["emapper_core_evalue"],
        score=config["emapper_core_score"],
        query_cover=config["emapper_core_query_cover"],
        subject_cover=config["emapper_core_subject_cover"],
        output="{group}-core",
        cpu=config["emapper_core_cpu"],
    conda:
        "env_emapper"
    shell:
        """
        mkdir {output.emapper_dir}
        emapper.py -i {input.fasta_dir}/core_nonhypo.fasta --pident {params.pident} \
        --evalue {params.evalue} --score {params.score} --query_cover {params.query_cover} \
        --subject_cover {params.subject_cover} --output {params.output} \
        --output_dir {output.emapper_dir} --cpu {params.cpu}
        """


# Rule to conduct COG analysis by running Egg-NOG-mapper for each group's shell nonhypo FASTAs
rule cog_analysis_shells:
    input:
        # Inputs are curated FASTAs from rule fasta_curation
        fasta_dir=rules.fasta_curation.output.fasta_dir,
    output:
        emapper_dir=directory(workspace + "all_groups/{group}/emapper-shells/"),
    params:
        # Parameters for Egg-NOG-mapper
        pident=config["emapper_shells_pident"],
        evalue=config["emapper_shells_evalue"],
        score=config["emapper_shells_score"],
        query_cover=config["emapper_shells_query_cover"],
        subject_cover=config["emapper_shells_subject_cover"],
        output="{group}-shells",
        cpu=config["emapper_shells_cpu"],
    conda:
        "env_emapper"
    shell:
        """
        mkdir {output.emapper_dir}
        emapper.py -i {input.fasta_dir}/shells_nonhypo.fasta --pident {params.pident} \
        --evalue {params.evalue} --score {params.score} --query_cover {params.query_cover} \
        --subject_cover {params.subject_cover} --output {params.output} \
        --output_dir {output.emapper_dir} --cpu {params.cpu}
        """


# Rule to draw nested pie chart for each group's core/shell COG analysis results
rule cog_visualization:
    input:
        # Inputs are annotated tsv files generated from Egg-NOG-mapper
        core_emapper_dir=rules.cog_analysis_core.output.emapper_dir,
        shells_emapper_dir=rules.cog_analysis_shells.output.emapper_dir,
    output:
        plot_dir=directory(workspace + "all_groups/{group}/cog_plots/"),
    params:
        core_hypo_path=workspace + "all_groups/{group}/FASTA/core_hypo.fasta",
        shells_hypo_path=workspace + "all_groups/{group}/FASTA/shells_hypo.fasta",
        group_name="{group}",
        types_core=config["types_core"],
        types_shells=config["types_shells"],
        core_statistics=workspace + "all_groups/{group}/emapper-core/statistics.txt",
        shells_statistics=workspace + "all_groups/{group}/emapper-shells/statistics.txt",
    conda:
        "env_emapper"
    shell:
        """
        mkdir {output.plot_dir}

        python workflow/scripts/cog_analysis_nested.py --tsv_file {input.core_emapper_dir}/*.annotations \
        --hypo_path {params.core_hypo_path} --group_name {params.group_name} \
        --types {params.types_core} --save_path {output.plot_dir}/ > {params.core_statistics}

        python workflow/scripts/cog_analysis_nested.py --tsv_file {input.shells_emapper_dir}/*.annotations \
        --hypo_path {params.shells_hypo_path} --group_name {params.group_name} \
        --types {params.types_shells} --save_path {output.plot_dir}/ > {params.shells_statistics}
        """


# Rule to draw Roary plots - slightly modified version of roary_plots.py by Marco Galardini
# https://github.com/sanger-pathogens/Roary/blob/master/contrib/roary_plots/README.md
rule roary_visualization:
    input:
        dummy=rules.roary_within_group.output.out_dir,
    output:
        plot_dir=directory(workspace + "all_groups/{group}/roary_plots/"),
    params:
        tmp_dir=directory(workspace + "roary_tmp/{group}/"),
        group="{group}",
    conda:
        "env_emapper"
    shell:
        """
        mkdir {output.plot_dir}
        FastTree -nt -gtr {params.tmp_dir}/core_gene_alignment.aln > {params.group}_tree.newick

        python workflow/scripts/roary_plots.py --labels {params.group}_tree.newick {params.tmp_dir}gene_presence_absence.csv \
        --save_path {output.plot_dir}

        mv {params.group}_tree.newick {output.plot_dir}
        """